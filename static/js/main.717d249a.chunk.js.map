{"version":3,"sources":["components/sideNav.js","components/wrapper.js","components/front.js","App.js","serviceWorker.js","index.js"],"names":["SideNav","Wrapper","props","handleTermChange","event","setState","keyWord","target","value","submitHandler","preventDefault","console","log","state","updateLink","users","isLoading","error","url","this","fetch","then","res","json","data","hits","catch","err","id","onSubmit","className","type","onChange","placeholder","src","largeImageURL","width","height","href","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.717d249a.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./style.css\"\r\n\r\nfunction SideNav(){\r\n    return(\r\n    <div className=\"sideNav  \">\r\n        <ul>\r\n            <li>Flora</li>\r\n            <li>Fauna</li>\r\n            <li>Tech</li>\r\n            <li>Mortals</li>\r\n        </ul>\r\n\r\n    </div>\r\n    )\r\n}\r\nexport default SideNav","/* eslint-disable jsx-a11y/alt-text */\r\nimport React from 'react';\r\nimport './style.css'\r\n\r\nclass Wrapper extends React.Component{\r\nconstructor(props){\r\n    super(props);\r\n\r\n    this.state={\r\n        users:[],\r\n        isLoading:true,\r\n        error:null,\r\n        keyWord:''\r\n    }\r\n    \r\n}\r\nupdateLink(){\r\n    var url=`https://pixabay.com/api/?key=18573804-7ea25786f4b555ca00fe625c2&q=${this.state.keyWord}&image_type=photo`;\r\n     fetch(url).then((res)=>{\r\n        return(res.json());\r\n    }).then((data)=>\r\n    this.setState({\r\n        users:data.hits,\r\n        isLoading:false\r\n    })).catch((err)=>{\r\n        this.setState({\r\n            error:err\r\n        })\r\n    });\r\n    \r\n}   \r\n    handleTermChange=(event)=>{\r\n    this.setState({\r\n        keyWord:event.target.value\r\n    })\r\n}\r\nsubmitHandler=(event)=>{\r\n    event.preventDefault();\r\n    console.log(\"submission taking place\");\r\n    console.log(this.state.keyWord)\r\n    this.updateLink()\r\n}\r\n\r\n    async componentDidMount(){\r\n        var url='https://pixabay.com/api/?key=18573804-7ea25786f4b555ca00fe625c2&q='+this.state.keyWord+'&image_type=photo';\r\n        console.log(url);\r\n        await fetch(url).then((res)=>{\r\n            return(res.json());\r\n        }).then((data)=>\r\n        this.setState({\r\n            users:data.hits,\r\n            isLoading:false\r\n        })).catch((err)=>{\r\n            this.setState({\r\n                error:err\r\n            })\r\n        });\r\n        \r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div id=\"wrapper\">\r\n                <div id=\"Front\">\r\n                <h1>Welcome to the Prime Gallery Builder</h1>\r\n            <h2>Search for your favourite item to view a gallery of it's best 10 images.</h2>\r\n            <form onSubmit={this.submitHandler}>\r\n                  <input className=\"mainInput\" type=\"text\" value={this.state.keyWord} onChange={this.handleTermChange} placeholder=\"Your Favourite Item\"></input>\r\n                <button className=\"mainButton\" type=\"submit\">Search</button>\r\n                \r\n            </form>\r\n            <br></br>\r\n            <br />\r\n            <br /></div>\r\n        <h1>Images of your favourite item:</h1>\r\n            <div id=\"mainGrid\">\r\n                <div className=\"gallery-img img1\">\r\n                    {this.state.isLoading ? \r\n                    \r\n                    (<h1>LOADING...</h1>):\r\n                    \r\n                    // eslint-disable-next-line jsx-a11y/alt-text\r\n                    (<img src={this.state.users[1].largeImageURL} width=\"100%\" height=\"100%\"></img>)}\r\n                    \r\n                </div>\r\n                <div className=\"gallery-img img2\">\r\n                {this.state.isLoading ? \r\n                    \r\n                    (<h1>LOADING...</h1>):\r\n                    \r\n                    (<img src={this.state.users[2].largeImageURL} width=\"100%\" height=\"100%\"></img>)}\r\n                    </div>\r\n                    <div className=\"img3 gallery-img\">\r\n                    {this.state.isLoading ? \r\n                    \r\n                    (<h1>LOADING...</h1>):\r\n                    \r\n                    (<img src={this.state.users[3].largeImageURL} width=\"100%\" height=\"100%\"></img>)}\r\n                    \r\n                    </div>\r\n                    <div className=\"img4 gallery-img\">\r\n                    {this.state.isLoading ? \r\n                    \r\n                    (<h1>LOADING...</h1>):\r\n                    \r\n                    // eslint-disable-next-line jsx-a11y/alt-text\r\n                    (<img src={this.state.users[4].largeImageURL} width=\"100%\" height=\"100%\"></img>)}\r\n                    \r\n                    </div>\r\n                    <div className=\"img5 gallery-img\">\r\n                    {this.state.isLoading ? \r\n                    \r\n                    (<h1>LOADING...</h1>):\r\n                    \r\n                    (<img src={this.state.users[5].largeImageURL} width=\"100%\" height=\"100%\"></img>)}\r\n                    </div>\r\n                    <div className=\"img6 gallery-img\">\r\n                    {this.state.isLoading ? \r\n                    \r\n                    (<h1>LOADING...</h1>):\r\n                    \r\n                    (<img src={this.state.users[6].largeImageURL} width=\"100%\" height=\"100%\"></img>)}\r\n                    </div>\r\n                    <div className=\"img7 gallery-img\">\r\n                    {this.state.isLoading ? \r\n                    \r\n                    (<h1>LOADING...</h1>):\r\n                    \r\n                    (<img src={this.state.users[7].largeImageURL} width=\"100%\" height=\"100%\"></img>)}\r\n                    </div>\r\n                    <div className=\"img8 gallery-img\">\r\n                    {this.state.isLoading ? \r\n                    \r\n                    (<h1>LOADING...</h1>):\r\n                    \r\n                    (<img src={this.state.users[8].largeImageURL} width=\"100%\" height=\"100%\"></img>)}\r\n                    </div>\r\n                    <div className=\"img9 gallery-img\">\r\n                    {this.state.isLoading ? \r\n                    \r\n                    (<h1>LOADING...</h1>):\r\n                    \r\n                    (<img src={this.state.users[9].largeImageURL} width=\"100%\" height=\"100%\"></img>)}\r\n                    </div>\r\n                    <div className=\"img10 gallery-img\">\r\n                    {this.state.isLoading ? \r\n                    \r\n                    (<h1>LOADING...</h1>):\r\n                    \r\n                    (<img src={this.state.users[10].largeImageURL} width=\"100%\" height=\"100%\"></img>)}\r\n                    </div>\r\n                   \r\n            </div>\r\n            <footer>\r\n                This site utilizes the <a href=\"https://pixabay.com/api/docs/\">Pixabay API</a> to retrieve images. Find out more about Pixabay <a href=\"https://pixabay.com\">here</a> \r\n            </footer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Wrapper","/* eslint-disable no-useless-constructor */\r\nimport React,{Component} from \"react\";\r\nimport \"./style.css\";\r\nimport Wrapper from \"./wrapper\";\r\n\r\nclass Front extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        \r\n        this.state={\r\n            searchTerm:''\r\n        }\r\n    }\r\n    changeInput=(event)=>{\r\n        if (event.key==='Enter'){\r\n        this.setState({\r\n            searchTerm:event.target.value\r\n            \r\n        })}\r\n    }\r\n    \r\n    handleTermChange=(event)=>{\r\n        this.setState({\r\n            searchTerm:event.target.value\r\n        })\r\n    }\r\n    submitHandler=(event)=>{\r\n        event.preventDefault()\r\n        this.setState({\r\n            searchTerm:event.target.value\r\n        })\r\n        console.log(`value being submitted ${this.state.searchTerm}`)\r\n    }\r\n    \r\n    /*submitHandler=(event)=>{\r\n        event.preventDefault();\r\n        console.log(`this is what the user input: ${this.inputRef.current.value}`);\r\n    }*/\r\n    render(){\r\n        return(\r\n        <div id=\"frontText\">\r\n            <h1>Welcome to the Prime Gallery Builder</h1>\r\n            <h2>Search for your favourite item to view a gallery of it's best 10 images.</h2>\r\n            <form onSubmit={this.submitHandler}>\r\n                  <input className=\"mainInput\" type=\"text\" defaultValue={this.state.searchTerm} onKeyDown={this.changeInput.bind(this)} placeholder=\"Your Favourite Item\"></input>\r\n                <button className=\"mainButton\" type=\"submit\" onClick={this.changeInput.bind(this)}>Search</button>\r\n                \r\n            </form>\r\n            <br></br>\r\n            <br />\r\n            <br />\r\n            <h1>Images of your favourite item:</h1>\r\n        </div>\r\n        )\r\n    }\r\n  \r\n}\r\nexport default Front;","/* eslint-disable no-unused-vars */\r\nimport React from 'react';\r\n\r\nimport './App.css';\r\nimport SideNav from './components/sideNav';\r\nimport Wrapper from './components/wrapper';\r\nimport Front from './components/front';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Wrapper/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}